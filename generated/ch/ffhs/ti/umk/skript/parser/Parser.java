
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 17 23:12:57 CEST 2021
//----------------------------------------------------

package ch.ffhs.ti.umk.skript.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import ch.ffhs.ti.umk.skript.instr.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 17 23:12:57 CEST 2021
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\031\006\000\002\031" +
    "\006\000\002\031\006\000\002\031\006\000\002\031\006" +
    "\000\002\031\006\000\002\021\006\000\002\017\006\000" +
    "\002\005\002\000\002\005\004\000\002\010\003\000\002" +
    "\010\003\000\002\014\010\000\002\013\006\000\002\011" +
    "\005\000\002\004\002\000\002\004\006\000\002\032\005" +
    "\000\002\016\005\000\002\016\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\007\005\000\002\007\005\000\002\030" +
    "\005\000\002\006\002\000\002\006\004\000\002\006\005" +
    "\000\002\022\003\000\002\022\004\000\002\022\005\000" +
    "\002\022\005\000\002\023\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\005\000\002\034\002\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\034\002\uffff\006\uffff\014\uffff\020\uffff\022" +
    "\uffff\025\uffff\034\uffff\035\uffff\036\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\001\002\000\004\002\164\001\002\000" +
    "\034\002\000\006\026\014\034\020\015\022\017\025\012" +
    "\034\027\035\024\036\023\045\014\046\022\047\016\050" +
    "\025\001\002\000\036\002\uffc3\006\uffc3\014\uffc3\016\053" +
    "\020\uffc3\022\uffc3\025\uffc3\034\uffc3\035\uffc3\036\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\056\002\uffd4" +
    "\005\uffd4\006\uffd4\007\046\010\045\011\044\014\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\001\002\000\036\002\uffc3\006\uffc3\014\uffc3" +
    "\016\053\020\uffc3\022\uffc3\025\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\036" +
    "\002\uffe9\006\uffe9\014\uffe9\016\uffe9\020\uffe9\022\uffe9\025" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\001\002\000\020\014\034\035\024\036\023\045" +
    "\037\046\022\047\016\050\025\001\002\000\036\002\uffe8" +
    "\006\uffe8\014\uffe8\016\uffe8\020\uffe8\022\uffe8\025\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\001\002\000\062\002\uffca\005\123\006\124\007\126\010" +
    "\125\011\121\012\122\013\127\014\uffca\015\uffca\016\uffca" +
    "\020\uffca\021\uffca\022\uffca\025\uffca\026\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\001\002\000\020\014\034\035\024\036\023\045\037\046" +
    "\022\047\016\050\025\001\002\000\100\002\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\025\uffc8" +
    "\026\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\001\002\000\020\014\034\035" +
    "\024\036\023\045\037\046\022\047\016\050\025\001\002" +
    "\000\036\002\uffc3\006\uffc3\014\uffc3\016\053\020\uffc3\022" +
    "\uffc3\025\uffc3\034\uffc3\035\uffc3\036\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\001\002\000\060\002\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\070\014\uffcc\015\uffcc" +
    "\016\uffcc\020\uffcc\021\uffcc\022\uffcc\025\uffcc\026\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\001\002\000\100\002\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\025\uffc7\026\uffc7\030" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\001\002\000\100\002\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\025\uffc5\026\uffc5" +
    "\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\001\002\000\100\002\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\025\uffc9\026" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\001\002\000\100\002\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\001\002\000\020\014\034\035" +
    "\024\036\023\045\037\046\022\047\016\050\025\001\002" +
    "\000\004\014\060\001\002\000\036\002\uffc3\006\uffc3\014" +
    "\uffc3\016\053\020\uffc3\022\uffc3\025\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000" +
    "\036\002\uffc3\006\uffc3\014\uffc3\016\053\020\uffc3\022\uffc3" +
    "\025\uffc3\034\uffc3\035\uffc3\036\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\001\002\000\036\002\uffc3\006\uffc3\014\uffc3" +
    "\016\053\020\uffc3\022\uffc3\025\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\040" +
    "\002\uffc3\005\040\006\041\014\uffc3\016\053\020\uffc3\022" +
    "\uffc3\025\uffc3\034\uffc3\035\uffc3\036\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\001\002\000\022\006\026\014\034\035" +
    "\024\036\023\045\037\046\022\047\016\050\025\001\002" +
    "\000\056\002\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\025\uffd0\026\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\010\005\040" +
    "\006\041\015\042\001\002\000\100\002\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\025\uffca\026" +
    "\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\001\002\000\020\014\034\035\024" +
    "\036\023\045\037\046\022\047\016\050\025\001\002\000" +
    "\020\014\034\035\024\036\023\045\037\046\022\047\016" +
    "\050\025\001\002\000\100\002\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\025\uffc4\026\uffc4\030" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\001\002\000\056\002\uffd2\005\uffd2\006\uffd2" +
    "\007\046\010\045\011\044\014\uffd2\015\uffd2\016\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\025\uffd2\026\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\001" +
    "\002\000\020\014\034\035\024\036\023\045\037\046\022" +
    "\047\016\050\025\001\002\000\020\014\034\035\024\036" +
    "\023\045\037\046\022\047\016\050\025\001\002\000\020" +
    "\014\034\035\024\036\023\045\037\046\022\047\016\050" +
    "\025\001\002\000\056\002\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\025\uffcf\026\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000" +
    "\056\002\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022\uffce\025" +
    "\uffce\026\uffce\033\uffce\034\uffce\035\uffce\036\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\001\002\000\056\002\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\020\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\001\002\000\056\002\uffd1\005\uffd1\006\uffd1\007" +
    "\046\010\045\011\044\014\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\025\uffd1\026\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002" +
    "\000\034\002\uffc2\006\uffc2\014\uffc2\020\uffc2\022\uffc2\025" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\001\002\000\034\002\ufffd\006\ufffd\014\ufffd\020" +
    "\ufffd\022\ufffd\025\ufffd\034\ufffd\035\ufffd\036\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\001\002\000\034\002\ufffa\006" +
    "\ufffa\014\ufffa\020\ufffa\022\ufffa\025\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\001\002\000" +
    "\034\002\ufffb\006\ufffb\014\ufffb\020\ufffb\022\ufffb\025\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\045\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\001\002\000\034\002\ufffe\006\ufffe\014\ufffe\020\ufffe" +
    "\022\ufffe\025\ufffe\034\ufffe\035\ufffe\036\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\001\002\000\024\006\026\014\034" +
    "\034\027\035\024\036\023\045\014\046\022\047\016\050" +
    "\025\001\002\000\046\002\ufff6\006\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\050\ufff6\001\002\000\046\002\ufff5\006\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\025\ufff5\026\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\001\002\000\004\015\066\001\002\000\050" +
    "\002\ufff7\005\040\006\041\014\ufff7\015\ufff7\016\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\001" +
    "\002\000\046\002\ufff4\006\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\025\ufff4\026\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\001\002\000\046\002\uffed\006\uffed\014\uffed\015\uffed\016" +
    "\uffed\020\uffed\021\uffed\022\uffed\025\uffed\026\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\001\002\000\056\002\uffd3\005\uffd3\006\uffd3\007\046" +
    "\010\045\011\044\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\025\uffd3\026\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000" +
    "\020\014\034\035\024\036\023\045\037\046\022\047\016" +
    "\050\025\001\002\000\056\002\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\025\uffcb\026\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002" +
    "\000\034\002\ufffc\006\ufffc\014\ufffc\020\ufffc\022\ufffc\025" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\001\002\000\004\032\104\001\002\000\042\006" +
    "\uffe0\014\uffe0\026\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\040\101\041\077\042\100\043\076\044\075\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\001\002\000\020\014\uffdb\035\uffdb" +
    "\036\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\001\002\000" +
    "\020\014\uffdc\035\uffdc\036\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\001\002\000\020\014\uffde\035\uffde\036\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\001\002\000\020\014\uffdd" +
    "\035\uffdd\036\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\001" +
    "\002\000\020\014\uffdf\035\uffdf\036\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\001\002\000\020\014\034\035\024\036" +
    "\023\045\037\046\022\047\016\050\025\001\002\000\030" +
    "\006\uffe1\014\uffe1\026\uffe1\032\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\001\002\000\024" +
    "\006\026\014\034\034\027\035\024\036\023\045\014\046" +
    "\022\047\016\050\025\001\002\000\040\002\uffe6\006\uffe6" +
    "\014\uffe6\016\uffe6\020\uffe6\022\uffe6\025\uffe6\033\106\034" +
    "\uffe6\035\uffe6\036\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\001\002\000\024\006\026\014\034\034\027\035\024\036" +
    "\023\045\014\046\022\047\016\050\025\001\002\000\036" +
    "\002\uffe7\006\uffe7\014\uffe7\016\uffe7\020\uffe7\022\uffe7\025" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\001\002\000\040\002\uffe4\006\uffe4\014\uffe4\016" +
    "\uffe4\020\uffe4\021\112\022\uffe4\025\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\001\002\000" +
    "\036\002\uffe5\006\uffe5\014\uffe5\016\uffe5\020\uffe5\022\uffe5" +
    "\025\uffe5\034\uffe5\035\uffe5\036\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\001\002\000\014\040\101\041\077\042\100" +
    "\043\076\044\075\001\002\000\024\006\026\014\034\034" +
    "\027\035\024\036\023\045\014\046\022\047\016\050\025" +
    "\001\002\000\020\014\034\035\024\036\023\045\037\046" +
    "\022\047\016\050\025\001\002\000\004\033\116\001\002" +
    "\000\024\006\uffe2\014\uffe2\034\uffe2\035\uffe2\036\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\001\002\000\040\002\uffe4" +
    "\006\uffe4\014\uffe4\016\uffe4\020\uffe4\021\112\022\uffe4\025" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\001\002\000\036\002\uffe3\006\uffe3\014\uffe3\016" +
    "\uffe3\020\uffe3\022\uffe3\025\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002\000\004\013" +
    "\153\001\002\000\004\013\151\001\002\000\004\013\147" +
    "\001\002\000\004\013\145\001\002\000\004\013\143\001" +
    "\002\000\004\013\141\001\002\000\024\006\026\014\034" +
    "\027\131\035\024\036\023\045\037\046\022\047\016\050" +
    "\025\001\002\000\050\002\uffda\005\040\006\041\014\uffda" +
    "\015\uffda\016\uffda\020\uffda\021\uffda\022\uffda\025\uffda\026" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\001\002\000\022\014\034\030\uffd7\035" +
    "\024\036\023\045\037\046\022\047\016\050\025\001\002" +
    "\000\046\002\uffd9\006\uffd9\014\uffd9\015\uffd9\016\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\025\uffd9\026\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\001" +
    "\002\000\024\014\034\017\136\030\uffd7\035\024\036\023" +
    "\045\037\046\022\047\016\050\025\001\002\000\004\030" +
    "\135\001\002\000\046\002\uffd8\006\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\001\002\000\022\014\034\030\uffd7\035\024\036" +
    "\023\045\037\046\022\047\016\050\025\001\002\000\004" +
    "\030\uffd6\001\002\000\004\030\uffd5\001\002\000\022\006" +
    "\026\014\034\035\024\036\023\045\037\046\022\047\016" +
    "\050\025\001\002\000\050\002\ufff1\005\040\006\041\014" +
    "\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1\025\ufff1" +
    "\026\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\001\002\000\022\006\026\014\034" +
    "\035\024\036\023\045\037\046\022\047\016\050\025\001" +
    "\002\000\050\002\uffef\005\040\006\041\014\uffef\015\uffef" +
    "\016\uffef\020\uffef\021\uffef\022\uffef\025\uffef\026\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\001\002\000\022\006\026\014\034\035\024\036" +
    "\023\045\037\046\022\047\016\050\025\001\002\000\050" +
    "\002\ufff2\005\040\006\041\014\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\001" +
    "\002\000\022\006\026\014\034\035\024\036\023\045\037" +
    "\046\022\047\016\050\025\001\002\000\050\002\ufff3\005" +
    "\040\006\041\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\025\ufff3\026\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\001\002\000\022" +
    "\006\026\014\034\035\024\036\023\045\037\046\022\047" +
    "\016\050\025\001\002\000\050\002\uffee\005\040\006\041" +
    "\014\uffee\015\uffee\016\uffee\020\uffee\021\uffee\022\uffee\025" +
    "\uffee\026\uffee\033\uffee\034\uffee\035\uffee\036\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\001\002\000\022\006\026\014" +
    "\034\035\024\036\023\045\037\046\022\047\016\050\025" +
    "\001\002\000\050\002\ufff0\005\040\006\041\014\ufff0\015" +
    "\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\026\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\001\002\000\026\006\026\014\034\026\uffeb" +
    "\034\027\035\024\036\023\045\014\046\022\047\016\050" +
    "\025\001\002\000\026\006\026\014\034\026\uffeb\034\027" +
    "\035\024\036\023\045\014\046\022\047\016\050\025\001" +
    "\002\000\004\026\160\001\002\000\036\002\uffec\006\uffec" +
    "\014\uffec\016\uffec\020\uffec\022\uffec\025\uffec\034\uffec\035" +
    "\uffec\036\uffec\045\uffec\046\uffec\047\uffec\050\uffec\001\002" +
    "\000\004\026\uffea\001\002\000\034\002\ufff9\006\ufff9\014" +
    "\ufff9\020\ufff9\022\ufff9\025\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\001\002\000\034\002" +
    "\ufff8\006\ufff8\014\ufff8\020\ufff8\022\ufff8\025\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\032\007\027\010\017\011\030\013\010\014\012" +
    "\017\007\021\031\022\032\023\006\024\034\025\020\031" +
    "\005\001\001\000\004\034\162\001\001\000\002\001\001" +
    "\000\004\034\161\001\001\000\002\001\001\000\006\016" +
    "\154\025\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\107\001\001\000\002\001\001\000\006\016" +
    "\072\025\073\001\001\000\004\034\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\066\024\034\025\020" +
    "\001\001\000\002\001\001\000\004\034\056\001\001\000" +
    "\004\034\055\001\001\000\004\034\054\001\001\000\004" +
    "\034\053\001\001\000\012\022\035\023\006\024\034\025" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\051\024\034\025\020\001\001\000" +
    "\010\023\042\024\034\025\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\050\025\020\001\001\000" +
    "\006\024\047\025\020\001\001\000\006\024\046\025\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\060\021\064\022\063\023\006\024\034\025\020" +
    "\026\062\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\070\025" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\102\001\001\000\002\001\001\000" +
    "\022\007\060\021\064\022\063\023\006\024\034\025\020" +
    "\026\104\031\061\001\001\000\002\001\001\000\022\007" +
    "\060\021\064\022\063\023\006\024\034\025\020\026\106" +
    "\031\061\001\001\000\002\001\001\000\004\004\110\001" +
    "\001\000\002\001\001\000\006\020\113\032\112\001\001" +
    "\000\022\007\060\021\064\022\063\023\006\024\034\025" +
    "\020\026\116\031\061\001\001\000\004\025\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\127\023\006\024\034\025\020" +
    "\030\131\001\001\000\002\001\001\000\006\006\133\025" +
    "\132\001\001\000\002\001\001\000\006\006\136\025\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\137\025\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\141\023\006\024\034\025\020\001\001\000" +
    "\002\001\001\000\012\022\143\023\006\024\034\025\020" +
    "\001\001\000\002\001\001\000\012\022\145\023\006\024" +
    "\034\025\020\001\001\000\002\001\001\000\012\022\147" +
    "\023\006\024\034\025\020\001\001\000\002\001\001\000" +
    "\012\022\151\023\006\024\034\025\020\001\001\000\002" +
    "\001\001\000\012\022\153\023\006\024\034\025\020\001" +
    "\001\000\002\001\001\000\024\005\156\007\060\021\064" +
    "\022\063\023\006\024\034\025\020\026\155\031\061\001" +
    "\001\000\024\005\160\007\060\021\064\022\063\023\006" +
    "\024\034\025\020\026\155\031\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENDE ::= SEP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENDE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENDE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENDE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SIMPLE_TERM ::= LPAR ARITHMETIC RPAR 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SIMPLE_TERM ::= FLOAT 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asFloat(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SIMPLE_TERM ::= FALSE 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asBool(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SIMPLE_TERM ::= STRING 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asString(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SIMPLE_TERM ::= TRUE 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asBool(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIMPLE_TERM ::= NUMBER 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asInt(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIMPLE_TERM ::= NAME 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionGetVariable(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // POWER ::= SIMPLE_TERM POW POWER 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.POW, st, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POWER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // POWER ::= SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POWER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRODUCT ::= PRODUCT MOD POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRODUCT ::= PRODUCT DIV POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRODUCT ::= PRODUCT TIMES POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRODUCT ::= POWER 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARITHMETIC ::= ARITHMETIC PLUS PRODUCT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.PLUS, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARITHMETIC ::= ARITHMETIC MINUS PRODUCT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MINUS, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARITHMETIC ::= MINUS PRODUCT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionNegate(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARITHMETIC ::= PRODUCT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETIC",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARRAY_TERM ::= SIMPLE_TERM COMMA ARRAY_TERM 
            {
              ArrayBuilder RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction term = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayBuilder at = (ArrayBuilder)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = at; RESULT.addElementToArray(term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_TERM",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARRAY_TERM ::= SIMPLE_TERM ARRAY_TERM 
            {
              ArrayBuilder RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction term = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayBuilder at = (ArrayBuilder)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = at; RESULT.addElementToArray(term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_TERM",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRAY_TERM ::= 
            {
              ArrayBuilder RESULT =null;
		 RESULT = new ArrayBuilder(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_TERM",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRAY_STATEMENT ::= ARR_START ARRAY_TERM ARR_END 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayBuilder st = (ArrayBuilder)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionGetArray(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_STATEMENT",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGNMENT ::= NAME ASSIGN ARRAY_STATEMENT 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionSetVariable(n, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASSIGNMENT ::= NAME ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionSetVariable(n, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMPARISON_OPERATOR ::= LOWER_EQUAL 
            {
              Instruction RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asString(eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON_OPERATOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMPARISON_OPERATOR ::= GREATER_EQUAL 
            {
              Instruction RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asString(eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON_OPERATOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMPARISON_OPERATOR ::= LOWER_THAN 
            {
              Instruction RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asString(eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON_OPERATOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMPARISON_OPERATOR ::= GREATER_THAN 
            {
              Instruction RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asString(eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON_OPERATOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMPARISON_OPERATOR ::= EQUAL 
            {
              Instruction RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.asString(eq); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON_OPERATOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDITIONAL_STATEMENT ::= SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction term = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionConditionalStatement(term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDITIONAL_STATEMENT ::= SIMPLE_TERM COMPARISON_OPERATOR SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int bs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction bs1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction co = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction bs2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionConditionalStatement(co, bs1, bs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDITIONAL_CASE_STATEMENT ::= COMPARISON_OPERATOR SIMPLE_TERM DOUBLE_POINT 
            {
              CaseStatement RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction co = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction bs2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CaseStatement(co, bs2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_CASE_STATEMENT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE_STATEMENTS ::= CASE_SYMBOL CONDITIONAL_CASE_STATEMENT BASIC_STATMENTS CASE_STATEMENTS 
            {
              CaseManager RESULT =null;
		int ruleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ruleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CaseStatement rule = (CaseStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseManager cases = (CaseManager)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cases; RESULT.addCase(rule, cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE_STATEMENTS ::= 
            {
              CaseManager RESULT =null;
		 RESULT = new CaseManager(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASE_STATEMENT ::= SWITCH SIMPLE_TERM CASE_STATEMENTS 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseManager cases = (CaseManager)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionSwitchStatement(st, cases); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF_STATEMENT ::= IF CONDITIONAL_STATEMENT QUESTION BASIC_STATMENTS 
            {
              Instruction RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction bs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionIfStatement(cs, bs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF_ELSE_STATEMENT ::= IF CONDITIONAL_STATEMENT QUESTION BASIC_STATMENTS DOUBLE_POINT BASIC_STATMENTS 
            {
              Instruction RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bsifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bsifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction bsif = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bselseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bselseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction bselse = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionIfElseStatement(cs, bsif, bselse); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_STATEMENT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTROL_STRUCTURE ::= IF_ELSE_STATEMENT 
            {
              Instruction RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ie = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  ie; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTROL_STRUCTURE ::= IF_STATEMENT 
            {
              Instruction RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ifs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WHILE_LINE ::= BASIC_STATMENTS WHILE_LINE 
            {
              WhileManager RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction bs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileManager wl = (WhileManager)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wl; RESULT.addStatement(bs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_LINE",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHILE_LINE ::= 
            {
              WhileManager RESULT =null;
		 RESULT = new WhileManager(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_LINE",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WHILE_STATEMENT ::= WHILE CONDITIONAL_STATEMENT WHILE_LINE END_WHILE 
            {
              Instruction RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileManager term = (WhileManager)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionWhileStatement(cs, term); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PRINT_STATEMENT ::= PRINT LPAR BASIC_STATMENTS RPAR 
            {
              Instruction RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction bs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionPrint(bs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT_STATEMENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REASSIGN_STATEMENT ::= NAME POW ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionReassignment(n, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASSIGN_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REASSIGN_STATEMENT ::= NAME DIV ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionReassignment(n, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASSIGN_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // REASSIGN_STATEMENT ::= NAME MOD ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionReassignment(n, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASSIGN_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REASSIGN_STATEMENT ::= NAME TIMES ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionReassignment(n, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASSIGN_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REASSIGN_STATEMENT ::= NAME MINUS ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionReassignment(n, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASSIGN_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REASSIGN_STATEMENT ::= NAME PLUS ASSIGN ARITHMETIC 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionReassignment(n, a, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASSIGN_STATEMENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BASIC_STATMENTS ::= PRINT_STATEMENT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_STATMENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BASIC_STATMENTS ::= REASSIGN_STATEMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_STATMENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BASIC_STATMENTS ::= ASSIGNMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_STATMENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BASIC_STATMENTS ::= ARITHMETIC 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_STATMENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST REASSIGN_STATEMENT ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int raleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction ra = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; RESULT.add(ra); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST WHILE_STATEMENT ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; RESULT.add(cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST PRINT_STATEMENT ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; RESULT.add(cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST CASE_STATEMENT ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; RESULT.add(cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST CONTROL_STRUCTURE ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = al; RESULT.add(cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST ARITHMETIC ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = al; RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST ASSIGNMENT ENDE 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = al; RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASSIGNMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= ASSIGNMENT_LIST 
            {
              Instruction RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionScript(al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction start_val = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

